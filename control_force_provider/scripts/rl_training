#! /usr/bin/env python

import rospy
import yaml
import signal
import control_force_provider.rl as rl
from control_force_provider.native import RLEnvironment
from argparse import ArgumentParser
from functools import reduce
from control_force_provider_msgs.srv import UpdateNetwork, UpdateNetworkResponse

rl_context = None
stop = False
action_dim = 3


def service_handle(request):
    state_dict = {}
    for field in request.__slots__:
        state_dict[field] = getattr(request, field)
    action = rl_context.update(state_dict).tolist()
    action.append(0)
    return UpdateNetworkResponse(action)


def signal_handle(sig, frame):
    global stop
    stop = True
    if rl_context is not None:
        rl_context.save()


def load_context(config):
    global rl_context
    num_obstacles = 0
    non_obstacles_keys = ["data"]
    for key in config["obstacles"]:
        if key not in non_obstacles_keys:
            num_obstacles += 1
    for key in ["max_force", "workspace_bb"]:
        config["rl"][key] = config[key]
    config = config["rl"]
    state_augmenter = rl.StateAugmenter(config["state_pattern"], num_obstacles, **config["state_augmenter"])
    config["state_dim"] = reduce(lambda x, y: x + y, (x[1] for x in state_augmenter.mapping.values()))
    config["action_dim"] = action_dim
    config["reward_function"] = rl.RewardFunction(fmax=config["max_force"], interval_duration=config["interval_duration"], dg=config["goal_reached_threshold_distance"], **config["reward_function"])
    config["state_augmenter"] = state_augmenter
    rl_context = rl.context_mapping[config["type"]](**config, **config[config["type"]])
    rl_context.load()


def main():
    global rl_context, stop
    arg_parser = ArgumentParser()
    arg_parser.add_argument("-s", "--service", action="store_true")
    args, _ = arg_parser.parse_known_args()
    config = rospy.get_param("control_force_provider/config")
    with open(config, "r") as f:
        config = yaml.safe_load(f)
    if config["algorithm"] != "rl" or not config["rl"]["train"]:
        return
    load_context(config)
    rospy.init_node("rl_training", anonymous=True)
    signal.signal(signal.SIGINT, signal_handle)

    if args.service:
        rospy.Service("update_network", UpdateNetwork, service_handle)
        rospy.spin()
    else:
        rl_environment = RLEnvironment()
        while not stop:
            states = rl_environment.getState()
            actions = rl_context.update(states)
            rl_environment.update(actions)

if __name__ == '__main__': main()
